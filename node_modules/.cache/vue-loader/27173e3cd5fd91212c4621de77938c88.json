{"remainingRequest":"/Users/frank/Documents/GitHub/long18/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/frank/Documents/GitHub/long18/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/frank/Documents/GitHub/long18/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/frank/Documents/GitHub/long18/src/views/Lotto.vue?vue&type=template&id=a0ff7c7c&scoped=true&","dependencies":[{"path":"/Users/frank/Documents/GitHub/long18/src/views/Lotto.vue","mtime":1595610356864},{"path":"/Users/frank/Documents/GitHub/long18/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frank/Documents/GitHub/long18/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/frank/Documents/GitHub/long18/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frank/Documents/GitHub/long18/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
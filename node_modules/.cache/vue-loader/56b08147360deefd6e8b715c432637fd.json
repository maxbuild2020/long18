{"remainingRequest":"/Users/frank/Desktop/project-demo/long18/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/frank/Desktop/project-demo/long18/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/frank/Desktop/project-demo/long18/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/frank/Desktop/project-demo/long18/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Users/frank/Desktop/project-demo/long18/src/views/Home.vue","mtime":1595609854105},{"path":"/Users/frank/Desktop/project-demo/long18/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frank/Desktop/project-demo/long18/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/frank/Desktop/project-demo/long18/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frank/Desktop/project-demo/long18/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}